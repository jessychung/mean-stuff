var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import { ErrorHandler, Inject, LOCALE_ID } from '@angular/core';
import { errors } from './errors';
/**
 * @hidden
 * The Intl Error Handler
 */
export var IntlErrorHandler = (function (_super) {
    __extends(IntlErrorHandler, _super);
    /**
     * Creates a new instance of the service with the ID of the specified locale.
     *
     * Note that the parts of the locale ID can be separated by either `_` (underscore)
     * or `-` (dash).
     */
    function IntlErrorHandler(localeId) {
        if (localeId === void 0) { localeId = 'en_US'; }
        _super.call(this);
        this.localeId = localeId;
        // Angular locales use underscore, e.g. en_US
        // while IETF BCP-47 specifies a dash.
        // https://tools.ietf.org/html/bcp47
        //
        this.localeId = this.localeId.replace(/_/g, '-');
    }
    IntlErrorHandler.prototype.handleError = function (error) {
        error.message = this.formatMessage(error);
        _super.prototype.handleError.call(this, error);
    };
    IntlErrorHandler.prototype.formatMessage = function (ex) {
        var intlError = errors[Object.keys(errors).filter(function (k) { return ex.message.indexOf(errors[k].name) !== -1; })[0]];
        return intlError ? intlError.formatMessage(this.localeId) : ex.message;
    };
    /** @nocollapse */
    IntlErrorHandler.ctorParameters = [
        { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
    ];
    return IntlErrorHandler;
}(ErrorHandler));
