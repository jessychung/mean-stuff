module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(29);


/***/ },

/***/ 2:
/***/ function(module, exports) {

	module.exports = require("./align-point");

/***/ },

/***/ 14:
/***/ function(module, exports) {

	module.exports = require("./collision");

/***/ },

/***/ 29:
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _alignPoint = __webpack_require__(2);

	var _alignPoint2 = _interopRequireDefault(_alignPoint);

	var _collision = __webpack_require__(14);

	var _collision2 = _interopRequireDefault(_collision);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var fit = function fit(position, size, viewPortSize) {
	    var output = 0;

	    if (position + size > viewPortSize) {
	        output = viewPortSize - (position + size);
	    }

	    if (position < 0) {
	        output = -position;
	    }

	    return output;
	};

	var flip = function flip(_ref) {
	    var offset = _ref.offset,
	        size = _ref.size,
	        anchorSize = _ref.anchorSize,
	        viewPortSize = _ref.viewPortSize,
	        anchorAlignPoint = _ref.anchorAlignPoint,
	        elementAlignPoint = _ref.elementAlignPoint;

	    var output = 0;

	    var isPositionCentered = elementAlignPoint === _alignPoint2.default.center || elementAlignPoint === _alignPoint2.default.middle;
	    var isOriginCentered = anchorAlignPoint === _alignPoint2.default.center || anchorAlignPoint === _alignPoint2.default.middle;

	    if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {
	        if (offset + size > viewPortSize) {
	            output += -(anchorSize + size);
	        }

	        if (offset + output < 0) {
	            output += anchorSize + size;
	        }
	    }
	    return output;
	};

	exports.default = function (options) {
	    var anchorRect = options.anchorRect,
	        anchorAlign = options.anchorAlign,
	        elementRect = options.elementRect,
	        elementAlign = options.elementAlign,
	        collisions = options.collisions,
	        viewPort = options.viewPort;
	    var elementTop = elementRect.top,
	        elementLeft = elementRect.left,
	        elementHeight = elementRect.height,
	        elementWidth = elementRect.width;
	    var viewPortHeight = viewPort.height,
	        viewPortWidth = viewPort.width;


	    var left = 0;
	    var top = 0;

	    var isHorizontalFlip = collisions.horizontal === _collision2.default.flip;
	    var isVerticalFlip = collisions.vertical === _collision2.default.flip;

	    if (collisions.vertical === _collision2.default.fit) {
	        top += fit(elementTop, elementHeight, viewPortHeight);
	    }

	    if (collisions.horizontal === _collision2.default.fit) {
	        left += fit(elementLeft, elementWidth, viewPortWidth);
	    }

	    if (isVerticalFlip) {
	        top += flip({
	            offset: elementTop,
	            size: elementHeight,
	            anchorSize: anchorRect.height,
	            viewPortSize: viewPortHeight,
	            anchorAlignPoint: anchorAlign.vertical,
	            elementAlignPoint: elementAlign.vertical
	        });
	    }

	    if (isHorizontalFlip) {
	        left += flip({
	            offset: elementLeft,
	            size: elementWidth,
	            anchorSize: anchorRect.width,
	            viewPortSize: viewPortWidth,
	            anchorAlignPoint: anchorAlign.horizontal,
	            elementAlignPoint: elementAlign.horizontal
	        });
	    }

	    return {
	        flipped: isHorizontalFlip && left !== 0 || isVerticalFlip && top !== 0,
	        offset: {
	            left: left,
	            top: top
	        }
	    };
	};

/***/ }

/******/ });