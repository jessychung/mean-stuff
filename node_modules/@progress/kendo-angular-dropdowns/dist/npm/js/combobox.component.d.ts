import '@telerik/kendo-theme-default/styles/packages/dropdowns';
import { ElementRef, EventEmitter, OnDestroy, Renderer } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SearchBarComponent } from './searchbar.component';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { HeaderTemplateDirective } from './templates/header-template.directive';
import { FooterTemplateDirective } from './templates/footer-template.directive';
import { IPopupSettings } from './popup-settings';
import { SelectionService } from './selection.service';
import { NavigationService } from './navigation.service';
/**
 * @hidden
 */
export declare const COMBOBOX_VALUE_ACCESSOR: any;
/**
 * Represents the Kendo UI ComboBox component for Angular.
 *
 * @example
 * ```ts
 * @@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="listItems">
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
export declare class ComboBoxComponent implements ControlValueAccessor, OnDestroy {
    text: any;
    dataItem: any;
    selected: any[];
    /**
     * Specifies whether the ComboBox allows user-defined values that are not present in the data set.
     *
     */
    allowCustom: boolean;
    /**
     * Sets or gets the `open` property of the ComboBox.
     *
     * > The `open` property determines whether the popup list of the ComboBox is visible or not.
     */
    open: boolean;
    private _data;
    private _open;
    private _value;
    private _previousValue;
    /**
     * Sets the data of the ComboBox.
     *
     * > The data has to be provided in an array-like list.
     */
    data: any;
    /**
     * Sets the value of the ComboBox. It could be either of the primivite (string, numbers)
     * or of the complex (objects) type. Use the `valuePrimitive` option to define the type.
     *
     * > Selected values that are not present in the source are considered custom values.
     */
    value: any;
    /**
     * Sets the data item field that represents the item text.
     *
     * If the data contains only primitive values, do not define it.
     */
    textField: string;
    /**
     * Sets the data item field that represents the item value.
     *
     * If the data contains only primitive values, do not define it.
     */
    valueField: string;
    /**
     * Specifies the type of the selected value. If set to `true`, the selected value has to be of a primitive value.
     *
     * For more details, refer to the section on
     * the [`valuePrimitive`]({% slug overview_combobox_kendouiforangular %}#valueprimitive-boolean) property.
     */
    valuePrimitive: boolean;
    /**
     * A user-defined callback returning normalized custom values.
     * Typically used when the data items are not of type `string`.
     * @param { Any } value - The custom value defined by the user.
     * @returns { Any }
     */
    normalizeValue: Function;
    /**
     * The hint displayed when the component is empty.
     *
     */
    placeholder: string;
    /**
     * Configures the popup of the DropDownList.
     *
     * The available options of the `IPopupSettings` are:
     *
     * - `width: Number`&mdash;Sets the width of the popup container. By default will be used the width of the host element.
     * - `height: Number`&mdash;Sets the height of the popup container. By default height is 200px.
     */
    popupSettings: IPopupSettings;
    /**
     * @hidden
     *
     * Enables the auto-completion of the text based on the first data item.
     */
    suggest: boolean;
    /**
     * Sets the disabled state of the component.
     */
    disabled: boolean;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex: number;
    /**
     * Enables the filter functionality. If set to `true`, the component emits the `filterChange` event.
     */
    filterable: boolean;
    /**
     * This event is triggered when the value is changed.
     *
     * For more details, refer to the section on the [`valueChange`]({% slug overview_combobox_kendouiforangular %}#on-value-change) event.
     */
    valueChange: EventEmitter<any>;
    /**
     * This event is triggered when an item selection is changed.
     *
     * For more details, refer to the section on
     * the [`selectionChange`]({% slug overview_combobox_kendouiforangular %}#on-change-of-item-selection) event.
     */
    selectionChange: EventEmitter<any>;
    /**
     * This event is triggered when the user types in the input. You can filter the source
     * based on the passed filtration value.
     *
     * For more details, refer to the section on
     * the [`filterChange`]({% slug overview_combobox_kendouiforangular %}#on-filter-change) event.
     */
    filterChange: EventEmitter<any>;
    template: ItemTemplateDirective;
    headerTemplate: HeaderTemplateDirective;
    footerTemplate: FooterTemplateDirective;
    searchbar: SearchBarComponent;
    readonly widgetClasses: boolean;
    readonly widgetHeight: string;
    readonly role: string;
    readonly widgetTabIndex: number;
    readonly ariaDisabled: boolean;
    readonly ariaHasPopup: boolean;
    readonly ariaExpanded: boolean;
    readonly ariaOwns: string;
    readonly ariaActivedescendant: string;
    listBoxId: string;
    optionPrefix: string;
    private selectionService;
    private changeSubscribtion;
    private selectSubscribtion;
    private navigationService;
    private navigationSubscribtion;
    private enterSubscription;
    private escSubscription;
    private openSubscribtion;
    private closeSubscription;
    protected onChangeCallback: Function;
    protected onTouchedCallback: Function;
    private popupWidth;
    private renderer;
    private wrapper;
    private isFocused;
    constructor(selectionService: SelectionService, navigationService: NavigationService, wrapper: ElementRef, renderer: Renderer);
    private subscribeEvents();
    private unsubscribeEvents();
    private handleItemChange(event);
    private handleItemSelect(event);
    ngOnDestroy(): void;
    ngOnChanges(changes: any): void;
    /**
     * @hidden
     */
    writeValue(value: any): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    protected verifySettings(newValue: any): void;
    protected setState(value: any): void;
    protected search(text: any): void;
    /**
     * @hidden
     */
    setHeaderClasses(): Object;
    protected navigate(index: number): void;
    /**
     * @hidden
     */
    handleNavigate(event: any): void;
    protected handleEnter(): void;
    /**
     * @hidden
     */
    handleFilter(text: string): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleBlur(): void;
    protected change(candidate: any, isCustom?: boolean): void;
    protected handleCustomValue(candidate: any, currentValue: any): boolean;
    protected handleValue(candidate: any, currentValue: any): boolean;
    /**
     * @hidden
     */
    iconClick(): void;
    protected getWidth(): string;
    protected getHeight(): any;
    protected setListContainerClasses(): Object;
}
