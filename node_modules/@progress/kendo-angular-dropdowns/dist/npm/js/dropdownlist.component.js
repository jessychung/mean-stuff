(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(24);


/***/ },
/* 1 */,
/* 2 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("@angular/forms");

/***/ },
/* 8 */,
/* 9 */
/***/ function(module, exports) {

	module.exports = require("@telerik/kendo-dropdowns-common");

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("./templates/item-template.directive");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("./templates/header-template.directive");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("./templates/footer-template.directive");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("./selection.service");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("./navigation.service");

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("./navigation-config");

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("./util");

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = require("./navigation-action");

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = require("./common/keys");

/***/ },
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* tslint:disable:max-line-length */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(2);
	var core_1 = __webpack_require__(6);
	var forms_1 = __webpack_require__(7);
	var Observable_1 = __webpack_require__(25);
	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(28);
	__webpack_require__(29);
	__webpack_require__(30);
	__webpack_require__(31);
	__webpack_require__(32);
	var keys_1 = __webpack_require__(18);
	var util_1 = __webpack_require__(16);
	var kendo_dropdowns_common_1 = __webpack_require__(9);
	var selection_service_1 = __webpack_require__(13);
	var navigation_service_1 = __webpack_require__(14);
	var navigation_config_1 = __webpack_require__(15);
	var item_template_directive_1 = __webpack_require__(10);
	var value_template_directive_1 = __webpack_require__(33);
	var header_template_directive_1 = __webpack_require__(11);
	var footer_template_directive_1 = __webpack_require__(12);
	var navigation_action_1 = __webpack_require__(17);
	/**
	 * @hidden
	 */
	exports.DROPDOWNLIST_VALUE_ACCESSOR = {
	    multi: true,
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return DropDownListComponent; })
	};
	var NAVIGATION_SETTINGS = {
	    useLeftRightArrows: true
	};
	var NAVIGATION_SETTINGS_PROVIDER = {
	    provide: navigation_config_1.NAVIGATION_CONFIG,
	    useValue: NAVIGATION_SETTINGS
	};
	/**
	 * Represents the Kendo UI DropDownList component for Angular.
	 *
	 * @example
	 * ```ts
	 * @@Component({
	 * selector: 'my-app',
	 * template: `
	 *  <kendo-dropdownlist [data]="listItems">
	 *  </kendo-dropdownlist>
	 * `
	 * })
	 * class AppComponent {
	 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
	 * }
	 * ```
	 */
	var DropDownListComponent = (function () {
	    function DropDownListComponent(selectionService, navigationService, wrapper, renderer) {
	        this._open = false;
	        /**
	         * Configures the popup of the DropDownList. The available options of the `IPopupSettings` are:
	         *
	         * - `width: Number`&mdash;Sets the width of the popup container. By default, the width of the host element is used.
	         * - `height: Number`&mdash;Sets the height of the popup container. By default, the height is 200px.
	         */
	        this.popupSettings = { height: 200 };
	        /**
	         * Sets the disabled state of the component.
	         */
	        this.disabled = false;
	        /**
	         * Enables the [filtering]({% slug overview_ddl_kendouiforangular %}#filtering) functionality of the DropDownList.
	         */
	        this.filterable = false;
	        /**
	         * Enables a case-insensitive search. Use this option when `filtration` is disabled.
	         */
	        this.ignoreCase = true;
	        /**
	         * Sets the delay before an item search is performed. Use this option when `filtration` is disabled.
	         */
	        this.delay = 500;
	        /**
	         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
	         */
	        this.tabIndex = 0;
	        /**
	         * This event is triggered when value is changed.
	         *
	         * For more details, refer to the section on the [`valueChange`]({% slug overview_ddl_kendouiforangular %}#on-value-change) event.
	         */
	        this.valueChange = new core_1.EventEmitter();
	        /**
	         * This event is triggered when the user types in the filter input. You can filter the source
	         * based on the passed filtration value.
	         *
	         * For more details, refer to the section on the [`filterChange`]({% slug overview_ddl_kendouiforangular %}#on-filter-change) event.
	         */
	        this.filterChange = new core_1.EventEmitter();
	        /**
	         * This event is triggered when the item selection is changed.
	         *
	         * For more details, refer to the section on
	         * the [`selectionChange`]({% slug overview_ddl_kendouiforangular %}#on-change-of-item-selection) event.
	         */
	        this.selectionChange = new core_1.EventEmitter();
	        this.listBoxId = util_1.guid();
	        this.optionPrefix = util_1.guid();
	        this.word = "";
	        this.last = "";
	        this.onTouchedCallback = function (_) { };
	        this.onChangeCallback = function (value) { };
	        this.filterFocused = new core_1.EventEmitter();
	        this.wrapperBlurred = new core_1.EventEmitter();
	        this.filterText = "";
	        this.isFocused = false;
	        this.selectionService = selectionService;
	        this.navigationService = navigationService;
	        this.wrapper = wrapper.nativeElement;
	        this.renderer = renderer;
	        this.data = [];
	        this.subscribeEvents();
	    }
	    Object.defineProperty(DropDownListComponent.prototype, "open", {
	        get: function () {
	            return this._open;
	        },
	        /**
	         * Sets or gets the `open` property of the DropDownList.
	         *
	         * > The `open` property determines whether the popup list of the DropDownList is visible or not.
	         */
	        set: function (open) {
	            if (this.disabled) {
	                return;
	            }
	            this._open = open;
	            if (open) {
	                this.popupWidth = this.getWidth();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        /**
	         * Sets the data of the DropDownList.
	         *
	         * > The data has to be provided in an array-like list.
	         */
	        set: function (data) {
	            this._data = data || [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        /**
	         * Sets the value of the DropDownList. It could be either of the *primivite* (string numbers)
	         * or of the *complex* (objects) type. Use the `valuePrimitive` option to define the type.
	         *
	         * > Selected values that are not present in the source are ignored.
	         */
	        set: function (newValue) {
	            this.verifySettings(newValue);
	            this._value = newValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.blur = function () {
	        this.wrapperBlurred.emit();
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.focus = function () {
	        this.isFocused = true;
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.keydown = function (event) {
	        var hasSelected = util_1.isPresent(this.selectionService.selected[0]);
	        var focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;
	        var offset = 0;
	        if (this.disabled) {
	            return;
	        }
	        if (!hasSelected) {
	            if (event.keyCode === keys_1.Keys.down) {
	                offset = -1;
	            }
	            else if (event.keyCode === keys_1.Keys.up) {
	                offset = 1;
	            }
	        }
	        var eventData = event;
	        var action = this.navigationService.process({
	            keyCode: eventData.keyCode,
	            altKey: eventData.altKey,
	            min: this.defaultItem ? -1 : 0,
	            max: this.data.length - 1,
	            current: focused + offset
	        });
	        if (action !== navigation_action_1.NavigationAction.Undefined &&
	            action !== navigation_action_1.NavigationAction.Tab &&
	            (action !== navigation_action_1.NavigationAction.Enter || (action === navigation_action_1.NavigationAction.Enter && this.open))) {
	            eventData.preventDefault();
	        }
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.keypress = function (event) {
	        this.onKeyPress(event);
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.click = function () {
	        this.open = !this.open;
	        if (!this.open) {
	            this.renderer.invokeElementMethod(this.wrapper, "focus");
	        }
	    };
	    Object.defineProperty(DropDownListComponent.prototype, "widgetClasses", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "role", {
	        get: function () {
	            return "listbox";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "widgetTabIndex", {
	        get: function () {
	            return this.disabled ? undefined : this.tabIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaDisabled", {
	        get: function () {
	            return this.disabled ? true : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaHasPopup", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaExpanded", {
	        get: function () {
	            return this.open;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaOwns", {
	        get: function () {
	            return this.listBoxId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DropDownListComponent.prototype, "ariaActivedescendant", {
	        get: function () {
	            return this.optionPrefix + "-" + kendo_dropdowns_common_1.DropDownsUtil.getter(this.value, this.valueField);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.onFilterFocus = function () {
	        this.filterFocused.emit();
	    };
	    DropDownListComponent.prototype.ngAfterViewChecked = function () {
	        if (this.open && this.filterInput) {
	            this.filterInput.nativeElement.focus();
	        }
	    };
	    DropDownListComponent.prototype.subscribeEvents = function () {
	        var _this = this;
	        if (!util_1.isDocumentAvailable()) {
	            return;
	        }
	        this.changeSubscribtion = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
	        this.selectSubscribtion = this.selectionService.onSelect.subscribe(this.handleItemSelect.bind(this));
	        this.navigationSubscribtion = this.navigationService.navigate.subscribe(this.selectionService.select.bind(this.selectionService));
	        this.openSubscribtion = this.navigationService.open.subscribe(function () { return _this.open = true; });
	        this.closeSubscription = this.navigationService.close.subscribe(function () {
	            _this.open = false;
	            _this.renderer.invokeElementMethod(_this.wrapper, "focus");
	        });
	        this.enterSubscription = this.navigationService.enter
	            .merge(this.navigationService.esc)
	            .subscribe(this.handleEnter.bind(this));
	        this.documentClick = Observable_1.Observable
	            .fromEvent(document, 'click')
	            .filter(function (event) {
	            return !(_this.wrapper !== event.target && _this.wrapper.contains(event.target));
	        });
	        this.componentBlurredSubscription = this.wrapperBlurred
	            .concatMap(function () { return Observable_1.Observable.interval(10).take(1).takeUntil(_this.filterFocused); })
	            .merge(this.navigationService.tab, this.documentClick)
	            .subscribe(function () {
	            _this.componentBlur();
	        });
	    };
	    DropDownListComponent.prototype.unsubscribeEvents = function () {
	        if (!util_1.isDocumentAvailable()) {
	            return;
	        }
	        this.changeSubscribtion.unsubscribe();
	        this.selectSubscribtion.unsubscribe();
	        this.navigationSubscribtion.unsubscribe();
	        this.openSubscribtion.unsubscribe();
	        this.closeSubscription.unsubscribe();
	        this.enterSubscription.unsubscribe();
	        this.componentBlurredSubscription.unsubscribe();
	    };
	    DropDownListComponent.prototype.handleItemChange = function (event) {
	        var index = event.indices.length ? event.indices[0] : undefined;
	        if (!util_1.isPresent(index)) {
	            return;
	        }
	        this.selectionChange.emit(this.data[index]);
	        this.change(this.data[index]);
	    };
	    DropDownListComponent.prototype.handleItemSelect = function (event) {
	        var index = event.indices.length ? event.indices[0] : undefined;
	        if (!util_1.isPresent(index)) {
	            return;
	        }
	        var dataItem = this.data[index] || this.defaultItem;
	        if (this.open) {
	            this.value = this.valuePrimitive ? kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.valueField) : dataItem;
	            this.text = kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.textField);
	            this.selectionChange.emit(dataItem);
	        }
	        else {
	            this.selectionChange.emit(dataItem);
	            this.change(dataItem);
	        }
	    };
	    DropDownListComponent.prototype.handleEnter = function () {
	        if (this.open) {
	            this.change(this.data[this.selectionService.focused]);
	            this.renderer.invokeElementMethod(this.wrapper, "focus");
	        }
	    };
	    DropDownListComponent.prototype.ngOnDestroy = function () {
	        this.unsubscribeEvents();
	    };
	    DropDownListComponent.prototype.ngOnChanges = function (changes) {
	        if (this.valuePrimitive === undefined) {
	            this.valuePrimitive = this.valueField ? false : true;
	        }
	        this.setState(this.value);
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.writeValue = function (newValue) {
	        this.verifySettings(newValue);
	        this.setState(newValue);
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.registerOnChange = function (fn) {
	        this.onChangeCallback = fn;
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.registerOnTouched = function (fn) {
	        this.onTouchedCallback = fn;
	    };
	    DropDownListComponent.prototype.verifySettings = function (newValue) {
	        if (!core_1.isDevMode()) {
	            return;
	        }
	        if (this.defaultItem && this.valueField && typeof this.defaultItem !== "object") {
	            throw new Error("defaultItem and data items must be of same type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/api/DropDownListComponent/#defaultitem-any");
	        }
	        if (this.valuePrimitive === true && util_1.isPresent(newValue) && typeof newValue === "object") {
	            throw new Error("Expected initial value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#value-selection");
	        }
	        if (this.valuePrimitive === false && util_1.isPresent(newValue) && typeof newValue !== "object") {
	            throw new Error("Expected initial value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#value-selection");
	        }
	    };
	    /**
	     * @hidden
	     */
	    DropDownListComponent.prototype.setHeaderClasses = function () {
	        return {
	            'k-dropdown-wrap': true,
	            'k-state-default': !this.disabled,
	            'k-state-disabled': this.disabled,
	            'k-state-focused': this.isFocused
	        };
	    };
	    DropDownListComponent.prototype.setListContainerClasses = function () {
	        return {
	            'k-list-container': true,
	            'k-reset': true
	        };
	    };
	    DropDownListComponent.prototype.setDefaultItemClasses = function () {
	        return {
	            'k-list-optionlabel': true
	        };
	    };
	    DropDownListComponent.prototype.getDefaultItemText = function () {
	        return kendo_dropdowns_common_1.DropDownsUtil.getter(this.defaultItem, this.textField);
	    };
	    DropDownListComponent.prototype.getText = function () {
	        return this.text;
	    };
	    DropDownListComponent.prototype.getWidth = function () {
	        var wrapperWidth = "";
	        var wrapperOffsetWidth = 0;
	        if (util_1.isDocumentAvailable()) {
	            wrapperWidth = this.wrapper.style.width;
	            wrapperOffsetWidth = this.wrapper.offsetWidth;
	        }
	        var width = this.popupSettings.width || wrapperWidth || wrapperOffsetWidth;
	        return isNaN(width) ? width : width + "px";
	    };
	    DropDownListComponent.prototype.getHeight = function () {
	        //defaultItem, filterInput, header, footer ???
	        return this.popupSettings.height;
	    };
	    DropDownListComponent.prototype.componentBlur = function () {
	        if (this._previousValue !== this.value) {
	            this.change(this.value);
	        }
	        else {
	            this.open = false;
	        }
	        this.onTouchedCallback();
	        this.isFocused = false;
	    };
	    DropDownListComponent.prototype.onMouseDown = function (event) {
	        var tagName = event.target.tagName.toLowerCase();
	        if (tagName !== "input") {
	            event.preventDefault();
	        }
	    };
	    DropDownListComponent.prototype.onKeyPress = function (event) {
	        if (event.which === 0 || event.keyCode === keys_1.Keys.enter) {
	            return;
	        }
	        var character = String.fromCharCode(event.charCode || event.keyCode);
	        if (this.ignoreCase) {
	            character = character.toLowerCase();
	        }
	        if (character === " ") {
	            event.preventDefault();
	        }
	        this.word += character;
	        this.last = character;
	        this.search();
	    };
	    DropDownListComponent.prototype.search = function () {
	        var _this = this;
	        clearTimeout(this.typingTimeout);
	        if (!this.filterable) {
	            this.typingTimeout = setTimeout(function () { _this.word = ""; }, this.delay);
	            this.selectNext();
	        }
	    };
	    DropDownListComponent.prototype.selectNext = function () {
	        var data = this.data.slice();
	        var dataLength = data.length + (this.defaultItem ? 1 : 0);
	        var isInLoop = kendo_dropdowns_common_1.DropDownsUtil.sameCharsOnly(this.word, this.last);
	        var startIndex = this.selectionService.selected[0] || 0 + (this.defaultItem ? 1 : 0);
	        var text, index;
	        startIndex += isInLoop ? 1 : 0;
	        startIndex = kendo_dropdowns_common_1.DropDownsUtil.normalizeIndex(startIndex, dataLength);
	        data = kendo_dropdowns_common_1.DropDownsUtil.shuffleData(data, startIndex, this.defaultItem);
	        index = 0;
	        for (; index < dataLength; index++) {
	            text = kendo_dropdowns_common_1.DropDownsUtil.getter(data[index], this.textField);
	            if (isInLoop && kendo_dropdowns_common_1.DropDownsUtil.matchText(text, this.last, this.ignoreCase)) {
	                break;
	            }
	            else if (kendo_dropdowns_common_1.DropDownsUtil.matchText(text, this.word, this.ignoreCase)) {
	                break;
	            }
	        }
	        if (index !== dataLength) {
	            if (this.defaultItem && kendo_dropdowns_common_1.DropDownsUtil.getter(data[index], this.valueField) === kendo_dropdowns_common_1.DropDownsUtil.getter(this.defaultItem, this.valueField)) {
	                this.navigate(-1);
	            }
	            else {
	                this.navigate(kendo_dropdowns_common_1.DropDownsUtil.normalizeIndex(startIndex + index, dataLength));
	            }
	        }
	    };
	    DropDownListComponent.prototype.change = function (dataItem) {
	        dataItem = dataItem || this.defaultItem;
	        this.open = false;
	        if (this._previousValue === kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.valueField)) {
	            return;
	        }
	        var primitiveValue = kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.valueField);
	        this.value = this.valuePrimitive ? kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.valueField) : dataItem;
	        this.text = kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.textField);
	        this._previousValue = this.value;
	        this.onChangeCallback(this.valuePrimitive ? primitiveValue : this.value);
	        this.valueChange.emit(this.valuePrimitive ? primitiveValue : this.value);
	        if (this.filterable) {
	            this.filterText = "";
	            this.filterChange.emit(this.filterText);
	        }
	    };
	    DropDownListComponent.prototype.navigate = function (index) {
	        this.selectionService.select(index);
	    };
	    DropDownListComponent.prototype.setState = function (value) {
	        var newValue = kendo_dropdowns_common_1.DropDownsUtil.getter(value, this.valueField) || value;
	        var valueCandidate;
	        var textCandidate;
	        var filterState = this.filterable && !!this.filterText;
	        if (!this.data.length) {
	            valueCandidate = value;
	            textCandidate = kendo_dropdowns_common_1.DropDownsUtil.getter(value, this.textField);
	        }
	        else {
	            this.verifySettings(value);
	            var result = kendo_dropdowns_common_1.DropDownsUtil.resolveValue({
	                data: this.data,
	                defaultItem: this.defaultItem,
	                value: newValue,
	                valueField: this.valueField
	            });
	            if (result.dataItem) {
	                this.selectionService.resetSelection(result.selected);
	                if (this.filterText) {
	                    this.selectionService.focused = 0;
	                }
	                valueCandidate = this.valuePrimitive ? kendo_dropdowns_common_1.DropDownsUtil.getter(result.dataItem, this.valueField) : result.dataItem;
	                textCandidate = kendo_dropdowns_common_1.DropDownsUtil.getter(result.dataItem, this.textField);
	            }
	            else if (filterState) {
	                this.selectionService.resetSelection([]);
	                this.selectionService.focused = 0;
	                valueCandidate = this.value;
	                textCandidate = this.text;
	            }
	            else {
	                this.selectionService.resetSelection(this.defaultItem ? [-1] : []);
	                this.selectionService.focused = 0;
	                valueCandidate = this.valuePrimitive ? kendo_dropdowns_common_1.DropDownsUtil.getter(this.defaultItem, this.valueField) : this.defaultItem;
	                textCandidate = kendo_dropdowns_common_1.DropDownsUtil.getter(this.defaultItem, this.textField);
	            }
	        }
	        this.value = valueCandidate;
	        this.text = textCandidate;
	        this._previousValue = this.value;
	    };
	    DropDownListComponent.prototype.handleFilter = function (event) {
	        this.filterChange.emit(event.target.value);
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], DropDownListComponent.prototype, "open", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], DropDownListComponent.prototype, "data", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], DropDownListComponent.prototype, "value", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "textField", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "valueField", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropDownListComponent.prototype, "popupSettings", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], DropDownListComponent.prototype, "defaultItem", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "filterable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ignoreCase", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], DropDownListComponent.prototype, "delay", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "valuePrimitive", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], DropDownListComponent.prototype, "tabIndex", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DropDownListComponent.prototype, "valueChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DropDownListComponent.prototype, "filterChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], DropDownListComponent.prototype, "selectionChange", void 0);
	    __decorate([
	        core_1.ContentChild(item_template_directive_1.ItemTemplateDirective), 
	        __metadata('design:type', item_template_directive_1.ItemTemplateDirective)
	    ], DropDownListComponent.prototype, "itemTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(value_template_directive_1.ValueTemplateDirective), 
	        __metadata('design:type', value_template_directive_1.ValueTemplateDirective)
	    ], DropDownListComponent.prototype, "valueTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(header_template_directive_1.HeaderTemplateDirective), 
	        __metadata('design:type', header_template_directive_1.HeaderTemplateDirective)
	    ], DropDownListComponent.prototype, "headerTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(footer_template_directive_1.FooterTemplateDirective), 
	        __metadata('design:type', footer_template_directive_1.FooterTemplateDirective)
	    ], DropDownListComponent.prototype, "footerTemplate", void 0);
	    __decorate([
	        core_1.ViewChild('filterInput'), 
	        __metadata('design:type', core_1.ElementRef)
	    ], DropDownListComponent.prototype, "filterInput", void 0);
	    __decorate([
	        core_1.HostListener('blur'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "blur", null);
	    __decorate([
	        core_1.HostListener('focus'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "focus", null);
	    __decorate([
	        core_1.HostListener('keydown', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "keydown", null);
	    __decorate([
	        core_1.HostListener('keypress', ['$event']), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', [Object]), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "keypress", null);
	    __decorate([
	        core_1.HostListener('click'), 
	        __metadata('design:type', Function), 
	        __metadata('design:paramtypes', []), 
	        __metadata('design:returntype', void 0)
	    ], DropDownListComponent.prototype, "click", null);
	    __decorate([
	        core_1.HostBinding('class.k-widget'),
	        core_1.HostBinding('class.k-dropdown'),
	        core_1.HostBinding('class.k-header'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "widgetClasses", null);
	    __decorate([
	        core_1.HostBinding('attr.role'), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "role", null);
	    __decorate([
	        core_1.HostBinding('tabindex'), 
	        __metadata('design:type', Number)
	    ], DropDownListComponent.prototype, "widgetTabIndex", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-disabled'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ariaDisabled", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-haspopup'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ariaHasPopup", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-expanded'), 
	        __metadata('design:type', Boolean)
	    ], DropDownListComponent.prototype, "ariaExpanded", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-owns'), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "ariaOwns", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-activedescendant'), 
	        __metadata('design:type', String)
	    ], DropDownListComponent.prototype, "ariaActivedescendant", null);
	    DropDownListComponent = __decorate([
	        core_1.Component({
	            providers: [exports.DROPDOWNLIST_VALUE_ACCESSOR, selection_service_1.SelectionService, navigation_service_1.NavigationService, NAVIGATION_SETTINGS_PROVIDER],
	            selector: 'kendo-dropdownlist',
	            template: "\n        <span [ngClass]=\"setHeaderClasses()\" unselectable=\"on\">\n            <span #anchor [ngClass]=\"{ 'k-input': true }\" unselectable=\"on\">\n                <template *ngIf=\"valueTemplate\"\n                    [templateContext]=\"{\n                        templateRef: valueTemplate.templateRef,\n                        $implicit: dataItem\n                    }\">\n                </template>\n                <template [ngIf]=\"!valueTemplate\">{{ getText() }}</template>\n            </span>\n            <span [ngClass]=\"{ 'k-select': true }\" unselectable=\"on\">\n                <span [ngClass]=\"{\n                    'k-icon': true,\n                    'k-i-arrow-s': true\n                }\"></span>\n            </span>\n        </span>\n        <kendo-popup *ngIf=\"open\"\n            [anchor]=\"anchor\"\n            [popupClass]=\"setListContainerClasses()\"\n            [style.width]=\"popupWidth\"\n            (anchorViewportLeave)=\"open=false\"\n            (mousedown)=\"onMouseDown($event)\">\n            <!--filterable-->\n            <template [ngIf]=\"filterable\">\n                <span [ngClass]=\"{ 'k-list-filter': true }\" (click)=\"$event.stopImmediatePropagation()\">\n                    <input #filterInput\n                        [(ngModel)]=\"filterText\" [ngClass]=\"{ 'k-textbox': true }\"\n                        (input)=\"handleFilter($event)\"\n                        (focus)=\"onFilterFocus()\" />\n                    <span [ngClass]=\"{ 'k-icon': true, 'k-i-search': true }\" unselectable=\"on\"></span>\n                </span>\n            </template>\n            <!--default item-->\n            <template [ngIf]=\"defaultItem && !itemTemplate\">\n                <div [ngClass]=\"setDefaultItemClasses()\" kendoDropDownsSelectable [index]=\"-1\">\n                    {{ getDefaultItemText() }}\n                </div>\n            </template>\n            <template [ngIf]=\"defaultItem && itemTemplate\">\n                <div [ngClass]=\"setDefaultItemClasses()\" kendoDropDownsSelectable [index]=\"-1\">\n                    <template\n                        [templateContext]=\"{\n                            templateRef: itemTemplate.templateRef,\n                            $implicit: defaultItem\n                        }\">\n                    </template>\n                </div>\n            </template>\n            <!--header template-->\n            <template *ngIf=\"headerTemplate\"\n                [templateContext]=\"{\n                    templateRef: headerTemplate.templateRef\n                }\">\n            </template>\n            <!--list-->\n            <kendo-list\n                [id]=\"listBoxId\"\n                [optionPrefix]=\"optionPrefix\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [template]=\"itemTemplate\"\n                [height]=\"getHeight()\"\n                [show]=\"open\"\n                >\n            </kendo-list>\n            <!--footer template-->\n            <template *ngIf=\"footerTemplate\"\n                [templateContext]=\"{\n                    templateRef: footerTemplate.templateRef\n                }\">\n            </template>\n        </kendo-popup>\n  "
	        }), 
	        __metadata('design:paramtypes', [selection_service_1.SelectionService, navigation_service_1.NavigationService, core_1.ElementRef, core_1.Renderer])
	    ], DropDownListComponent);
	    return DropDownListComponent;
	}());
	exports.DropDownListComponent = DropDownListComponent;


/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = require("rxjs/Observable");

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/observable/fromEvent");

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/observable/interval");

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/filter");

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/take");

/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/takeUntil");

/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/concatMap");

/***/ },
/* 32 */
/***/ function(module, exports) {

	module.exports = require("rxjs/add/operator/merge");

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = require("./templates/value-template.directive");

/***/ }
/******/ ])));
//# sourceMappingURL=dropdownlist.component.js.map