(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* tslint:disable:no-null-keyword */
	/* tslint:disable:max-line-length */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(2);
	var core_1 = __webpack_require__(6);
	var forms_1 = __webpack_require__(7);
	var searchbar_component_1 = __webpack_require__(8);
	var kendo_dropdowns_common_1 = __webpack_require__(9);
	var item_template_directive_1 = __webpack_require__(10);
	var header_template_directive_1 = __webpack_require__(11);
	var footer_template_directive_1 = __webpack_require__(12);
	var selection_service_1 = __webpack_require__(13);
	var navigation_service_1 = __webpack_require__(14);
	var navigation_config_1 = __webpack_require__(15);
	var util_1 = __webpack_require__(16);
	var navigation_action_1 = __webpack_require__(17);
	var keys_1 = __webpack_require__(18);
	/**
	 * @hidden
	 */
	exports.COMBOBOX_VALUE_ACCESSOR = {
	    multi: true,
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return ComboBoxComponent; })
	};
	var NAVIGATION_SETTINGS = {
	    useLeftRightArrows: false
	};
	var NAVIGATION_SETTINGS_PROVIDER = {
	    provide: navigation_config_1.NAVIGATION_CONFIG,
	    useValue: NAVIGATION_SETTINGS
	};
	/**
	 * Represents the Kendo UI ComboBox component for Angular.
	 *
	 * @example
	 * ```ts
	 * @@Component({
	 * selector: 'my-app',
	 * template: `
	 *  <kendo-combobox [data]="listItems">
	 *  </kendo-combobox>
	 * `
	 * })
	 * class AppComponent {
	 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
	 * }
	 * ```
	 */
	var ComboBoxComponent = (function () {
	    function ComboBoxComponent(selectionService, navigationService, wrapper, renderer) {
	        this.text = undefined;
	        this.selected = [];
	        /**
	         * Specifies whether the ComboBox allows user-defined values that are not present in the data set.
	         *
	         */
	        this.allowCustom = false;
	        this._open = false;
	        this._previousValue = undefined;
	        /**
	         * A user-defined callback returning normalized custom values.
	         * Typically used when the data items are not of type `string`.
	         * @param { Any } value - The custom value defined by the user.
	         * @returns { Any }
	         */
	        this.normalizeValue = function (value) {
	            return value;
	        };
	        /**
	         * The hint displayed when the component is empty.
	         *
	         */
	        this.placeholder = "";
	        /**
	         * Configures the popup of the DropDownList.
	         *
	         * The available options of the `IPopupSettings` are:
	         *
	         * - `width: Number`&mdash;Sets the width of the popup container. By default will be used the width of the host element.
	         * - `height: Number`&mdash;Sets the height of the popup container. By default height is 200px.
	         */
	        this.popupSettings = { height: 200 };
	        /**
	         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
	         */
	        this.tabIndex = 0;
	        /**
	         * Enables the filter functionality. If set to `true`, the component emits the `filterChange` event.
	         */
	        this.filterable = false;
	        /**
	         * This event is triggered when the value is changed.
	         *
	         * For more details, refer to the section on the [`valueChange`]({% slug overview_combobox_kendouiforangular %}#on-value-change) event.
	         */
	        this.valueChange = new core_1.EventEmitter();
	        /**
	         * This event is triggered when an item selection is changed.
	         *
	         * For more details, refer to the section on
	         * the [`selectionChange`]({% slug overview_combobox_kendouiforangular %}#on-change-of-item-selection) event.
	         */
	        this.selectionChange = new core_1.EventEmitter();
	        /**
	         * This event is triggered when the user types in the input. You can filter the source
	         * based on the passed filtration value.
	         *
	         * For more details, refer to the section on
	         * the [`filterChange`]({% slug overview_combobox_kendouiforangular %}#on-filter-change) event.
	         */
	        this.filterChange = new core_1.EventEmitter();
	        this.listBoxId = util_1.guid();
	        this.optionPrefix = util_1.guid();
	        this.onChangeCallback = function (value) { };
	        this.onTouchedCallback = function (_) { };
	        this.isFocused = false;
	        this.selectionService = selectionService;
	        this.navigationService = navigationService;
	        this.renderer = renderer;
	        this.wrapper = wrapper.nativeElement;
	        this.data = [];
	        this.subscribeEvents();
	    }
	    Object.defineProperty(ComboBoxComponent.prototype, "open", {
	        get: function () {
	            return this._open;
	        },
	        /**
	         * Sets or gets the `open` property of the ComboBox.
	         *
	         * > The `open` property determines whether the popup list of the ComboBox is visible or not.
	         */
	        set: function (open) {
	            if (this.disabled) {
	                return;
	            }
	            this._open = open;
	            if (open) {
	                this.popupWidth = this.getWidth();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "data", {
	        get: function () {
	            return this._data;
	        },
	        /**
	         * Sets the data of the ComboBox.
	         *
	         * > The data has to be provided in an array-like list.
	         */
	        set: function (data) {
	            this._data = data || [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "value", {
	        get: function () {
	            return this._value;
	        },
	        /**
	         * Sets the value of the ComboBox. It could be either of the primivite (string, numbers)
	         * or of the complex (objects) type. Use the `valuePrimitive` option to define the type.
	         *
	         * > Selected values that are not present in the source are considered custom values.
	         */
	        set: function (newValue) {
	            this.verifySettings(newValue);
	            this._value = newValue;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "widgetClasses", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "widgetHeight", {
	        get: function () {
	            return this.popupSettings.height + "px";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "role", {
	        get: function () {
	            return "listbox";
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "widgetTabIndex", {
	        get: function () {
	            return this.disabled ? undefined : this.tabIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "ariaDisabled", {
	        get: function () {
	            return this.disabled ? true : undefined;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "ariaHasPopup", {
	        get: function () {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "ariaExpanded", {
	        get: function () {
	            return this.open;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "ariaOwns", {
	        get: function () {
	            return this.listBoxId;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ComboBoxComponent.prototype, "ariaActivedescendant", {
	        get: function () {
	            return this.optionPrefix + "-" + this.value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ComboBoxComponent.prototype.subscribeEvents = function () {
	        var _this = this;
	        if (!util_1.isDocumentAvailable()) {
	            return;
	        }
	        this.changeSubscribtion = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
	        this.selectSubscribtion = this.selectionService.onSelect.subscribe(this.handleItemSelect.bind(this));
	        this.navigationSubscribtion = this.navigationService.navigate.subscribe(function (index) { return _this.navigate(index); });
	        this.openSubscribtion = this.navigationService.open.subscribe(function () { return _this.open = true; });
	        this.closeSubscription = this.navigationService.close.subscribe(function () { return _this.open = false; });
	        this.enterSubscription = this.navigationService.enter.subscribe(this.handleEnter.bind(this));
	        this.escSubscription = this.navigationService.esc.subscribe(this.handleBlur.bind(this));
	    };
	    ComboBoxComponent.prototype.unsubscribeEvents = function () {
	        if (!util_1.isDocumentAvailable()) {
	            return;
	        }
	        this.changeSubscribtion.unsubscribe();
	        this.selectSubscribtion.unsubscribe();
	        this.navigationSubscribtion.unsubscribe();
	        this.openSubscribtion.unsubscribe();
	        this.closeSubscription.unsubscribe();
	        this.enterSubscription.unsubscribe();
	        this.escSubscription.unsubscribe();
	    };
	    ComboBoxComponent.prototype.handleItemChange = function (event) {
	        var index = event.indices.length ? event.indices[0] : undefined;
	        if (!util_1.isPresent(index)) {
	            return;
	        }
	        this.selectionChange.emit(this.data[index]);
	        this.change(this.data[index]);
	    };
	    ComboBoxComponent.prototype.handleItemSelect = function (event) {
	        var index = event.indices.length ? event.indices[0] : undefined;
	        if (!util_1.isPresent(index)) {
	            return;
	        }
	        this.selectionChange.emit(this.data[index]);
	        if (!this.open) {
	            this.change(this.data[index]);
	        }
	    };
	    ComboBoxComponent.prototype.ngOnDestroy = function () {
	        this.unsubscribeEvents();
	    };
	    ComboBoxComponent.prototype.ngOnChanges = function (changes) {
	        if (this.valuePrimitive === undefined) {
	            this.valuePrimitive = this.valueField ? false : true;
	        }
	        this.setState(this.value);
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.writeValue = function (value) {
	        this.text = undefined;
	        this.setState(value);
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.registerOnChange = function (fn) {
	        this.onChangeCallback = fn;
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.registerOnTouched = function (fn) {
	        this.onTouchedCallback = fn;
	    };
	    ComboBoxComponent.prototype.verifySettings = function (newValue) {
	        if (!core_1.isDevMode()) {
	            return;
	        }
	        if (this.valuePrimitive === true && util_1.isPresent(newValue) && typeof newValue === "object") {
	            throw new Error("Expected initial value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#value-selection");
	        }
	        if (this.valuePrimitive === false && util_1.isPresent(newValue) && typeof newValue !== "object") {
	            throw new Error("Expected initial value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#value-selection");
	        }
	    };
	    ComboBoxComponent.prototype.setState = function (value) {
	        var newValue = kendo_dropdowns_common_1.DropDownsUtil.getter(value, this.valueField) || value;
	        var valueCandidate;
	        var textCandidate;
	        var dataItemCandidate;
	        if (!this.data.length) {
	            valueCandidate = value;
	            textCandidate = !this.valuePrimitive ? kendo_dropdowns_common_1.DropDownsUtil.getter(value, this.textField) : undefined;
	            dataItemCandidate = this.valueField && !this.valuePrimitive ? value : undefined;
	        }
	        else {
	            //data and value available - try to resolve initial value to dataItem
	            var result = kendo_dropdowns_common_1.DropDownsUtil.resolveValue({
	                data: this.data,
	                value: newValue,
	                valueField: this.valueField
	            });
	            valueCandidate = this.valuePrimitive ? newValue : value;
	            if (result.dataItem) {
	                this.selectionService.resetSelection(result.selected);
	                textCandidate = kendo_dropdowns_common_1.DropDownsUtil.getter(result.dataItem, this.textField);
	                dataItemCandidate = result.dataItem;
	            }
	            else {
	                this.selectionService.resetSelection([]);
	                textCandidate = this.valueField ? kendo_dropdowns_common_1.DropDownsUtil.getter(value, this.textField) : value;
	                dataItemCandidate = !this.valuePrimitive ? value : undefined;
	            }
	        }
	        this.value = valueCandidate;
	        this.text = textCandidate || undefined; //TODO: Util.getter returns NULL instead of undefined. Refactor maybe?
	        this.dataItem = dataItemCandidate;
	    };
	    ComboBoxComponent.prototype.search = function (text) {
	        var _this = this;
	        var index = this.data.findIndex(function (item) {
	            var itemText = kendo_dropdowns_common_1.DropDownsUtil.getter(item, _this.textField);
	            itemText = itemText === undefined ? "" : itemText.toString().toLowerCase();
	            return itemText.startsWith(text.toLowerCase());
	        });
	        this.selectionService.focused = index;
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.setHeaderClasses = function () {
	        return {
	            'k-dropdown-wrap': true,
	            'k-state-default': !this.disabled,
	            'k-state-disabled': this.disabled,
	            'k-state-focused': this.isFocused
	        };
	    };
	    ComboBoxComponent.prototype.navigate = function (index) {
	        this.text = kendo_dropdowns_common_1.DropDownsUtil.getter(this.data[index], this.textField);
	        this.selectionService.select(index);
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.handleNavigate = function (event) {
	        var hasSelected = util_1.isPresent(this.selectionService.selected[0]);
	        var focused = isNaN(this.selectionService.focused) ? 0 : this.selectionService.focused;
	        var offset = 0;
	        if (this.disabled) {
	            return;
	        }
	        if (!hasSelected) {
	            if (event.keyCode === keys_1.Keys.down) {
	                offset = -1;
	            }
	            else if (event.keyCode === keys_1.Keys.up) {
	                offset = 1;
	            }
	        }
	        var action = this.navigationService.process({
	            keyCode: event.keyCode,
	            altKey: event.altKey,
	            min: 0,
	            max: this.data.length - 1,
	            current: focused + offset
	        });
	        if (action !== navigation_action_1.NavigationAction.Undefined
	            && (action !== navigation_action_1.NavigationAction.Enter || (action === navigation_action_1.NavigationAction.Enter && this.open))) {
	            event.preventDefault();
	        }
	    };
	    ComboBoxComponent.prototype.handleEnter = function () {
	        var focused = this.selectionService.focused;
	        var isCustom = focused === -1;
	        if (!isCustom) {
	            this.selectionService.select(focused);
	        }
	        this.change(this.data[focused] || this.text, isCustom);
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.handleFilter = function (text) {
	        this.text = text;
	        //Reset the selection prior filter. It will be resolved if there is a match and we don't need it if there isn't one
	        this.selectionService.resetSelection([]);
	        this.selectionService.focused = 0;
	        this.open = true;
	        if (this.filterable) {
	            this.filterChange.emit(text);
	        }
	        else {
	            this.search(text);
	        }
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.handleFocus = function () {
	        this.isFocused = true;
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.handleBlur = function () {
	        if (this.text === undefined) {
	            this.open = false;
	            this.isFocused = false;
	            return;
	        }
	        var focused = this.selectionService.focused;
	        var dataItem;
	        var text;
	        if (focused !== -1) {
	            dataItem = this.data[focused];
	            text = kendo_dropdowns_common_1.DropDownsUtil.getter(dataItem, this.textField) || "";
	        }
	        if (text && text.toLowerCase() === this.text.toLowerCase()) {
	            this.selectionService.change(focused);
	        }
	        else {
	            this.change(this.text, true);
	        }
	        this.open = false;
	        this.isFocused = false;
	    };
	    ComboBoxComponent.prototype.change = function (candidate, isCustom) {
	        if (isCustom === void 0) { isCustom = false; }
	        var currentValue = kendo_dropdowns_common_1.DropDownsUtil.getter(this.value, this.valueField);
	        var hasChange = false;
	        this.open = false;
	        if (isCustom) {
	            hasChange = this.handleCustomValue(candidate, currentValue);
	        }
	        else {
	            hasChange = this.handleValue(candidate, currentValue);
	        }
	        if (hasChange) {
	            this._previousValue = this.value;
	            this.onChangeCallback(this.value);
	            this.valueChange.emit(this.value);
	        }
	    };
	    ComboBoxComponent.prototype.handleCustomValue = function (candidate, currentValue) {
	        this.dataItem = undefined;
	        if (!this.allowCustom) {
	            this.text = undefined;
	            this.value = undefined;
	            return true;
	        }
	        var normalizedValue = this.normalizeValue(candidate);
	        if (kendo_dropdowns_common_1.DropDownsUtil.getter(normalizedValue, this.valueField) === currentValue) {
	            return false;
	        }
	        this.value = normalizedValue;
	        return true;
	    };
	    ComboBoxComponent.prototype.handleValue = function (candidate, currentValue) {
	        var newValue = kendo_dropdowns_common_1.DropDownsUtil.getter(candidate, this.valueField);
	        var newText = kendo_dropdowns_common_1.DropDownsUtil.getter(candidate, this.textField);
	        if (currentValue === newValue && this.text === newText) {
	            return false;
	        }
	        this.dataItem = candidate;
	        this.value = this.valuePrimitive ? newValue : candidate;
	        this.text = newText;
	        return true;
	    };
	    /**
	     * @hidden
	     */
	    ComboBoxComponent.prototype.iconClick = function () {
	        this.searchbar.focus();
	        this.open = !this.open;
	    };
	    ComboBoxComponent.prototype.getWidth = function () {
	        var width = this.popupSettings.width || this.wrapper.style.width || this.wrapper.offsetWidth;
	        return isNaN(width) ? width : width + "px";
	    };
	    ComboBoxComponent.prototype.getHeight = function () {
	        //header, footer ???
	        return this.popupSettings.height;
	    };
	    ComboBoxComponent.prototype.setListContainerClasses = function () {
	        return {
	            'k-list-container': true,
	            'k-reset': true
	        };
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "allowCustom", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean), 
	        __metadata('design:paramtypes', [Boolean])
	    ], ComboBoxComponent.prototype, "open", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], ComboBoxComponent.prototype, "data", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], ComboBoxComponent.prototype, "value", null);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "textField", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "valueField", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "valuePrimitive", void 0);
	    __decorate([
	        core_1.Input('valueNormalizer'), 
	        __metadata('design:type', Function)
	    ], ComboBoxComponent.prototype, "normalizeValue", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "placeholder", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], ComboBoxComponent.prototype, "popupSettings", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "suggest", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], ComboBoxComponent.prototype, "tabIndex", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "filterable", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ComboBoxComponent.prototype, "valueChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ComboBoxComponent.prototype, "selectionChange", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], ComboBoxComponent.prototype, "filterChange", void 0);
	    __decorate([
	        core_1.ContentChild(item_template_directive_1.ItemTemplateDirective), 
	        __metadata('design:type', item_template_directive_1.ItemTemplateDirective)
	    ], ComboBoxComponent.prototype, "template", void 0);
	    __decorate([
	        core_1.ContentChild(header_template_directive_1.HeaderTemplateDirective), 
	        __metadata('design:type', header_template_directive_1.HeaderTemplateDirective)
	    ], ComboBoxComponent.prototype, "headerTemplate", void 0);
	    __decorate([
	        core_1.ContentChild(footer_template_directive_1.FooterTemplateDirective), 
	        __metadata('design:type', footer_template_directive_1.FooterTemplateDirective)
	    ], ComboBoxComponent.prototype, "footerTemplate", void 0);
	    __decorate([
	        core_1.ViewChild(searchbar_component_1.SearchBarComponent), 
	        __metadata('design:type', searchbar_component_1.SearchBarComponent)
	    ], ComboBoxComponent.prototype, "searchbar", void 0);
	    __decorate([
	        core_1.HostBinding('class.k-widget'),
	        core_1.HostBinding('class.k-combobox'),
	        core_1.HostBinding('class.k-header'), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "widgetClasses", null);
	    __decorate([
	        core_1.HostBinding('style.max-height'), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "widgetHeight", null);
	    __decorate([
	        core_1.HostBinding('attr.role'), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "role", null);
	    __decorate([
	        core_1.HostBinding('tabindex'), 
	        __metadata('design:type', Number)
	    ], ComboBoxComponent.prototype, "widgetTabIndex", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-disabled'), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "ariaDisabled", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-haspopup'), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "ariaHasPopup", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-expanded'), 
	        __metadata('design:type', Boolean)
	    ], ComboBoxComponent.prototype, "ariaExpanded", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-owns'), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "ariaOwns", null);
	    __decorate([
	        core_1.HostBinding('attr.aria-activedescendant'), 
	        __metadata('design:type', String)
	    ], ComboBoxComponent.prototype, "ariaActivedescendant", null);
	    ComboBoxComponent = __decorate([
	        core_1.Component({
	            providers: [exports.COMBOBOX_VALUE_ACCESSOR, selection_service_1.SelectionService, navigation_service_1.NavigationService, NAVIGATION_SETTINGS_PROVIDER],
	            selector: 'kendo-combobox',
	            template: "\n        <span #anchor [ngClass]=\"setHeaderClasses()\" unselectable=\"on\">\n            <kendo-searchbar #searchbar\n                [value]=\"text\"\n                [disabled]=\"disabled\"\n                [placeholder]=\"placeholder\"\n                (onNavigate)=\"handleNavigate($event)\"\n                (onFilter)=\"handleFilter($event)\"\n                (onBlur)=\"handleBlur()\"\n                (onFocus)=\"handleFocus()\"\n            ></kendo-searchbar>\n            <span\n                 [ngClass]=\"{ 'k-select': true }\"\n                 (click)=\"iconClick()\"\n                 (mousedown)=\"$event.preventDefault()\"\n                 unselectable=\"on\">\n                 <span [ngClass]=\"{\n                     'k-icon': true,\n                     'k-i-arrow-s': true\n                 }\"></span>\n        </span>\n        <kendo-popup *ngIf=\"open\"\n            [anchor]=\"anchor\"\n            [popupClass]=\"setListContainerClasses()\"\n            [style.width]=\"popupWidth\"\n            (anchorViewportLeave)=\"open=false\"\n            (mousedown)=\"$event.preventDefault()\">\n            <!--header template-->\n            <template *ngIf=\"headerTemplate\"\n                [templateContext]=\"{\n                    templateRef: headerTemplate.templateRef\n                }\">\n            </template>\n            <!--list-->\n            <kendo-list\n                [id]=\"listBoxId\"\n                [optionPrefix]=\"optionPrefix\"\n                [data]=\"data\"\n                [textField]=\"textField\"\n                [valueField]=\"valueField\"\n                [template]=\"template\"\n                [height]=\"getHeight()\"\n                [show]=\"open\"\n            >\n            </kendo-list>\n            <!--footer template-->\n            <template *ngIf=\"footerTemplate\"\n                [templateContext]=\"{\n                    templateRef: footerTemplate.templateRef\n                }\">\n            </template>\n        </kendo-popup>\n  "
	        }), 
	        __metadata('design:paramtypes', [selection_service_1.SelectionService, navigation_service_1.NavigationService, core_1.ElementRef, core_1.Renderer])
	    ], ComboBoxComponent);
	    return ComboBoxComponent;
	}());
	exports.ComboBoxComponent = ComboBoxComponent;


/***/ },
/* 2 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 7 */
/***/ function(module, exports) {

	module.exports = require("@angular/forms");

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("./searchbar.component");

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("@telerik/kendo-dropdowns-common");

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("./templates/item-template.directive");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("./templates/header-template.directive");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("./templates/footer-template.directive");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("./selection.service");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("./navigation.service");

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = require("./navigation-config");

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = require("./util");

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = require("./navigation-action");

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = require("./common/keys");

/***/ }
/******/ ])));
//# sourceMappingURL=combobox.component.js.map