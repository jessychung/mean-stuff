import { EventEmitter, OnDestroy, QueryList, AfterContentInit, OnChanges, SimpleChange, ElementRef } from '@angular/core';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/merge';
import { SortDescriptor } from '@progress/kendo-data-query';
import { ColumnComponent } from './column.component';
import { DetailTemplateDirective } from './detail-template.directive';
import { ScrollMode } from './scrollmode';
import { SortSettings } from './sort-settings';
import { PagerSettings } from './pager-settings';
import { BrowserSupportService } from './browser-support.service';
import { GridDataResult } from './data.collection';
import { SelectionService, SelectionEvent } from './selection.service';
import { PageChangeEvent, DataStateChangeEvent } from './change-event-args.interface';
/**
 * Represents the Kendo UI Grid component for Angular.
 *
 * @example
 * ```ts-preview
 * @@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-grid [data]="gridData">
 *        </kendo-grid>
 *    `
 * })
 * class AppComponent {
 *    private gridData: any[] = products;
 * }
 *
 * const products = [{
 *    "ProductID": 1,
 *    "ProductName": "Chai",
 *    "UnitPrice": 18.0000,
 *    "Discontinued": true
 *  }, {
 *    "ProductID": 2,
 *    "ProductName": "Chang",
 *    "UnitPrice": 19.0000,
 *    "Discontinued": false
 *  }
 * ];
 * ```
 */
export declare class GridComponent implements AfterContentInit, OnDestroy, OnChanges {
    private selectionService;
    wrapper: ElementRef;
    /**
     * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count.
     */
    data: Array<any> | GridDataResult;
    /**
     * Defines the page size used by the Grid pager.
     * It is required by the [paging functionality]({% slug overview_grid_kendouiforangular %}#paging).
     */
    pageSize: number;
    /**
     * Defines the height (in pixels) that is used when the `scrollable` option of the Grid is set.
     */
    height: number;
    /**
     * Defines the row height that is used when the `scrollable` option of the Grid is set to `virtual`.
     * It is required by the [virtual scrolling functionality]({% slug overview_grid_kendouiforangular %}#virtual-scrolling).
     */
    rowHeight: number;
    /**
     * Defines the detail row height that is used when the `scrollable` option of the Grid is set to `virtual`.
     * It is required by the [virtual scrolling functionality]({% slug overview_grid_kendouiforangular %}#virtual-scrolling).
     */
    detailRowHeight: number;
    /**
     * Defines the number of records to be skipped by the pager.
     * It is required by the [paging functionality]({% slug overview_grid_kendouiforangular %}#paging).
     */
    skip: number;
    /**
     * Defines the scroll mode used by the Grid. The available options are:
     *  - `none`&mdash;Renders no scrollbar.
     *  - `scrollable`&mdash;This is the default scroll mode. It requires the setting of the `height` option.
     *  - `virtual`&mdash;Displays no pager and renders a portion of data (optimized rendering) while the user is scrolling the content.
     */
    scrollable: ScrollMode;
    /**
     * Enables the single-row [selection]({% slug overview_grid_kendouiforangular %}#selection) of the Grid.
     */
    selectable: boolean;
    /**
     * @hidden
     */
    /**
     * Sorts the descriptors by which the data has to be sorted.
     */
    sort: Array<SortDescriptor>;
    /**
     * @hidden
     */
    readonly showPager: boolean;
    /**
     * Enables the [sorting]({% slug overview_grid_kendouiforangular %}#sorting) of the Grid columns that have their `field` option set.
     */
    sortable: SortSettings;
    /**
     * Configures the pager of the Grid. The available options of the `PagerSettings` are:
     *
     * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.
     * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.
     * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.
     * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.
     * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.
     */
    pageable: PagerSettings | boolean;
    /**
     * The `pageChange` event is trigged when the page of the Grid is changed. You have to handle the event yourself and sort the data.
     */
    pageChange: EventEmitter<PageChangeEvent>;
    /**
     * The `sortChange` event is trigged when the sorting of the Grid is changed. You have to handle the event yourself and sort the data.
     */
    sortChange: EventEmitter<Array<SortDescriptor>>;
    /**
     * The `selectionChange` event is trigged when the user selects a Grid row.
     * Emits the [`SelectionEvent`]({% slug api_grid_selectionevent_kendouiforangular %}#selectionChange).
     */
    selectionChange: EventEmitter<SelectionEvent>;
    /**
     * The `dataStateChange` event is trigged when the data state of the Grid is changed.
     */
    dataStateChange: EventEmitter<DataStateChangeEvent>;
    columns: QueryList<ColumnComponent>;
    readonly className: string;
    detailTemplate: DetailTemplateDirective;
    header: any;
    footer: any;
    private scrollbarWidth;
    private columnsContainer;
    private shouldGenerateColumns;
    private view;
    readonly showFooter: boolean;
    private _sort;
    readonly isVirtual: boolean;
    readonly isScrollable: boolean;
    readonly lockedColumns: QueryList<ColumnComponent>;
    readonly nonLockedColumns: QueryList<ColumnComponent>;
    private readonly lockedWidth;
    private readonly nonLockedWidth;
    private selectionSubscription;
    private stateChangeSubscription;
    constructor(supportService: BrowserSupportService, selectionService: SelectionService, wrapper: ElementRef);
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngAfterContentChecked(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    protected containerScroll({scrollLeft}: {
        scrollTop: number;
        scrollLeft: number;
    }): void;
    protected notifyPageChange(source: string, event: any): void;
    private verifySettings();
    private autoGenerateColumns();
    private attachStateChangesEmitter();
}
