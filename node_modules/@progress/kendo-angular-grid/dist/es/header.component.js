import { Component, Input, Output, HostBinding, EventEmitter } from '@angular/core';
import { normalize } from './sort-settings';
import { isPresent, isTruthy, isNullOrEmptyString } from './utils';
/**
 * @hidden
 */
/**
 * @hidden
 */
export var HeaderComponent = (function () {
    function HeaderComponent() {
        this.columns = [];
        this.sort = new Array();
        this.sortable = false;
        this.sortChange = new EventEmitter();
    }
    Object.defineProperty(HeaderComponent.prototype, "headerClass", {
        get: function () {
            return !this.scrollable;
        },
        enumerable: true,
        configurable: true
    });
    HeaderComponent.prototype.sortColumn = function (column) {
        this.sortChange.emit(this.toggleSort(column));
        //prevent default
        return false;
    };
    HeaderComponent.prototype.sortIcon = function (field) {
        var state = this.sortDescriptor(field);
        return {
            'k-icon': isPresent(state.dir),
            'k-i-arrow-s': state.dir === "desc",
            'k-i-arrow-n': state.dir === "asc"
        };
    };
    HeaderComponent.prototype.toggleSort = function (column) {
        var _a = normalize(this.sortable, column.sortable), allowUnsort = _a.allowUnsort, mode = _a.mode;
        var descriptor = this.toggleDirection(column.field, allowUnsort);
        if (mode === 'single') {
            return [descriptor];
        }
        return this.sort.filter(function (desc) { return desc.field !== column.field; }).concat([descriptor]);
    };
    HeaderComponent.prototype.isSortable = function (column) {
        return !isNullOrEmptyString(column.field)
            && isTruthy(this.sortable) && isTruthy(column.sortable);
    };
    HeaderComponent.prototype.toggleDirection = function (field, allowUnsort) {
        var descriptor = this.sortDescriptor(field);
        var dir = 'asc';
        if (descriptor.dir === 'asc') {
            dir = 'desc';
        }
        else if (descriptor.dir === 'desc' && allowUnsort) {
            dir = undefined;
        }
        return { dir: dir, field: field };
    };
    HeaderComponent.prototype.sortDescriptor = function (field) {
        return this.sort.find(function (item) { return item.field === field; }) || { field: field };
    };
    HeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: '[kendoGridHeader]',
                    template: "\n    <template [ngIf]=\"true\">\n        <tr>\n            <th\n                [class.k-hierarchy-cell]=\"true\"\n                [class.k-header]=\"true\"\n                *ngIf=\"detailTemplate?.templateRef\">\n            </th>\n            <th\n                class=\"k-header\"\n                [ngClass]=\"column.headerClass\"\n                [ngStyle]=\"column.headerStyle\"\n                *ngFor=\"let column of columns; let columnIndex = index\">\n                <template [ngIf]=\"!isSortable(column)\">\n                    <template\n                        [templateContext]=\"{\n                            templateRef: column.headerTemplateRef,\n                            columnIndex: columnIndex,\n                            column: column,\n                            $implicit: column\n                        }\">\n                    </template>\n                    <template [ngIf]=\"!column.headerTemplateRef\">{{column.title || column.field}}</template>\n                </template>\n                <template [ngIf]=\"isSortable(column)\">\n                    <a href=\"#\" class=\"k-link\" (click)=\"sortColumn(column)\">\n                        <template\n                            [templateContext]=\"{\n                                templateRef: column.headerTemplateRef,\n                                columnIndex: columnIndex,\n                                column: column,\n                                $implicit: column\n                            }\">\n                        </template>\n                        <template [ngIf]=\"!column.headerTemplateRef\">{{column.title || column.field}}</template>\n                        <span [ngClass]=\"sortIcon(column.field)\"></span>\n                    </a>\n                </template>\n            </th>\n        </tr>\n    </template>\n    "
                },] },
    ];
    /** @nocollapse */
    HeaderComponent.ctorParameters = [];
    HeaderComponent.propDecorators = {
        'columns': [{ type: Input },],
        'detailTemplate': [{ type: Input },],
        'scrollable': [{ type: Input },],
        'sort': [{ type: Input },],
        'sortable': [{ type: Input },],
        'sortChange': [{ type: Output },],
        'headerClass': [{ type: HostBinding, args: ['class.k-grid-header',] },],
    };
    return HeaderComponent;
}());
