import { Component, Input, Output, ContentChildren, ContentChild, EventEmitter, HostBinding, ViewChild, QueryList, isDevMode, ElementRef } from '@angular/core';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/merge';
import { ColumnComponent } from './column.component';
import { DetailTemplateDirective } from './detail-template.directive';
import { isArray, isChanged } from './utils';
import { BrowserSupportService } from './browser-support.service';
import { DataResultIterator, DataCollection } from './data.collection';
import { SelectionService } from './selection.service';
import { DetailsService } from './details.service';
import { ColumnsContainer } from './columns-container';
/**
 * Represents the Kendo UI Grid component for Angular.
 *
 * @example
 * ```ts-preview
 * @@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-grid [data]="gridData">
 *        </kendo-grid>
 *    `
 * })
 * class AppComponent {
 *    private gridData: any[] = products;
 * }
 *
 * const products = [{
 *    "ProductID": 1,
 *    "ProductName": "Chai",
 *    "UnitPrice": 18.0000,
 *    "Discontinued": true
 *  }, {
 *    "ProductID": 2,
 *    "ProductName": "Chang",
 *    "UnitPrice": 19.0000,
 *    "Discontinued": false
 *  }
 * ];
 * ```
 */
export var GridComponent = (function () {
    function GridComponent(supportService, selectionService, wrapper) {
        var _this = this;
        this.selectionService = selectionService;
        this.wrapper = wrapper;
        /**
         * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count.
         */
        this.data = [];
        /**
         * Defines the number of records to be skipped by the pager.
         * It is required by the [paging functionality]({% slug overview_grid_kendouiforangular %}#paging).
         */
        this.skip = 0;
        /**
         * Defines the scroll mode used by the Grid. The available options are:
         *  - `none`&mdash;Renders no scrollbar.
         *  - `scrollable`&mdash;This is the default scroll mode. It requires the setting of the `height` option.
         *  - `virtual`&mdash;Displays no pager and renders a portion of data (optimized rendering) while the user is scrolling the content.
         */
        this.scrollable = 'scrollable';
        /**
         * Enables the single-row [selection]({% slug overview_grid_kendouiforangular %}#selection) of the Grid.
         */
        this.selectable = false;
        /**
         * Enables the [sorting]({% slug overview_grid_kendouiforangular %}#sorting) of the Grid columns that have their `field` option set.
         */
        this.sortable = false;
        /**
         * Configures the pager of the Grid. The available options of the `PagerSettings` are:
         *
         * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.
         * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.
         * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.
         * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.
         * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.
         */
        this.pageable = false;
        /**
         * The `pageChange` event is trigged when the page of the Grid is changed. You have to handle the event yourself and sort the data.
         */
        this.pageChange = new EventEmitter();
        /**
         * The `sortChange` event is trigged when the sorting of the Grid is changed. You have to handle the event yourself and sort the data.
         */
        this.sortChange = new EventEmitter();
        /**
         * The `selectionChange` event is trigged when the user selects a Grid row.
         * Emits the [`SelectionEvent`]({% slug api_grid_selectionevent_kendouiforangular %}#selectionChange).
         */
        this.selectionChange = new EventEmitter();
        /**
         * The `dataStateChange` event is trigged when the data state of the Grid is changed.
         */
        this.dataStateChange = new EventEmitter();
        this.columns = new QueryList();
        this.columnsContainer = new ColumnsContainer(function () { return _this.columns; });
        this.shouldGenerateColumns = true;
        this.view = new DataCollection(function () { return new DataResultIterator(_this.data); });
        this._sort = new Array();
        this.scrollbarWidth = supportService.scrollbarWidth;
        this.selectionSubscription = selectionService.changes.subscribe(function (event) {
            _this.selectionChange.emit(event);
        });
        this.attachStateChangesEmitter();
    }
    Object.defineProperty(GridComponent.prototype, "sort", {
        /**
         * @hidden
         */
        get: function () {
            return this._sort;
        },
        /**
         * Sorts the descriptors by which the data has to be sorted.
         */
        set: function (value) {
            if (isArray(value)) {
                this._sort = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(GridComponent.prototype, "showPager", {
        /**
         * @hidden
         */
        get: function () {
            return !this.isVirtual && this.pageable !== false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "className", {
        get: function () {
            return [
                'k-widget',
                'k-grid',
                this.lockedColumns.length && 'k-grid-lockedcolumns',
                this.isVirtual && 'k-grid-virtual'
            ].filter(Boolean).join(' ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "showFooter", {
        get: function () {
            return this.columns.reduce(function (acc, column) { return column.footerTemplateRef ? acc + 1 : acc; }, 0) > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "isVirtual", {
        get: function () {
            return this.scrollable === 'virtual';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "isScrollable", {
        get: function () {
            return this.scrollable !== 'none';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "lockedColumns", {
        get: function () {
            return this.columnsContainer.lockedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "nonLockedColumns", {
        get: function () {
            return this.columnsContainer.nonLockedColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "lockedWidth", {
        get: function () {
            return this.lockedColumns.reduce(function (prev, curr) { return prev + (curr.width || 0); }, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridComponent.prototype, "nonLockedWidth", {
        get: function () {
            if (this.lockedColumns.length) {
                return this.nonLockedColumns.reduce(function (prev, curr) { return prev + (curr.width || 0); }, 0);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    GridComponent.prototype.ngOnChanges = function (changes) {
        if (isChanged("data", changes)) {
            this.autoGenerateColumns();
        }
    };
    GridComponent.prototype.ngAfterContentChecked = function () {
        this.columnsContainer.refresh();
        this.verifySettings();
    };
    GridComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.shouldGenerateColumns = !this.columns.length;
        this.autoGenerateColumns();
        this.columns.changes.subscribe(function () { return _this.verifySettings(); });
    };
    GridComponent.prototype.ngOnDestroy = function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.stateChangeSubscription) {
            this.stateChangeSubscription.unsubscribe();
        }
    };
    GridComponent.prototype.containerScroll = function (_a) {
        var scrollLeft = _a.scrollLeft;
        this.header.nativeElement.scrollLeft = scrollLeft;
        if (this.footer) {
            this.footer.nativeElement.scrollLeft = scrollLeft;
        }
    };
    GridComponent.prototype.notifyPageChange = function (source, event) {
        if (source === "list" && !this.isVirtual) {
            return;
        }
        this.pageChange.emit(event);
    };
    GridComponent.prototype.verifySettings = function () {
        if (isDevMode()) {
            if (this.lockedColumns.length && this.detailTemplate) {
                throw new Error('Having both detail template and locked columns is not supported');
            }
            if (this.lockedColumns.length && !this.nonLockedColumns.length) {
                throw new Error('There should be at least one non locked column');
            }
            if (this.lockedColumns.length && this.columns.filter(function (x) { return !x.width; }).length) {
                throw new Error('Locked columns feature requires all columns to have width set');
            }
            if (this.lockedColumns.length && !this.isScrollable) {
                throw new Error('Locked columns are only supported when scrolling is enabled');
            }
        }
    };
    GridComponent.prototype.autoGenerateColumns = function () {
        if (this.shouldGenerateColumns && !this.columns.length && this.view.length) {
            this.columns.reset(Object.keys(this.view.first).map(function (field) {
                var column = new ColumnComponent();
                column.field = field;
                return column;
            }));
        }
    };
    GridComponent.prototype.attachStateChangesEmitter = function () {
        var _this = this;
        this.stateChangeSubscription =
            this.pageChange.map(function (x) { return ({ skip: x.skip, sort: _this.sort, take: x.take }); })
                .merge(this.sortChange.map(function (sort) { return ({ skip: _this.skip, sort: sort, take: _this.pageSize }); }))
                .subscribe(function (x) { return _this.dataStateChange.emit(x); });
    };
    GridComponent.decorators = [
        { type: Component, args: [{
                    providers: [BrowserSupportService, SelectionService, DetailsService],
                    selector: 'kendo-grid',
                    template: "\n        <ng-content select=\"kendo-grid-toolbar\"></ng-content>\n        <template [ngIf]=\"isScrollable\">\n            <div\n                class=\"k-grid-header\"\n                [style.paddingRight.px]=\"scrollbarWidth\">\n                <div class=\"k-grid-header-locked\"\n                    *ngIf=\"lockedColumns.length\"\n                     [style.width.px]=\"lockedWidth\">\n                    <table>\n                        <colgroup kendoGridColGroup\n                            [columns]=\"lockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <thead kendoGridHeader\n                            [scrollable]=\"true\"\n                            [columns]=\"lockedColumns\"\n                            [sort]=\"sort\"\n                            [sortable]=\"sortable\"\n                            (sortChange)=\"sortChange.emit($event)\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </thead>\n                    </table>\n                </div><div class=\"k-grid-header-wrap\" #header\n                    [kendoGridResizableContainer]=\"lockedColumns.length\"\n                    [lockedWidth]=\"lockedWidth + scrollbarWidth + 3\">\n                    <table [style.width.px]=\"nonLockedWidth\">\n                        <colgroup kendoGridColGroup\n                            [columns]=\"nonLockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <thead kendoGridHeader\n                            [scrollable]=\"true\"\n                            [columns]=\"nonLockedColumns\"\n                            [sort]=\"sort\"\n                            [sortable]=\"sortable\"\n                            (sortChange)=\"sortChange.emit($event)\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </thead>\n                    </table>\n                </div>\n            </div>\n            <kendo-grid-list\n                [data]=\"view\"\n                [height]=\"height\"\n                [rowHeight]=\"rowHeight\"\n                [detailRowHeight]=\"detailRowHeight\"\n                [total]=\"isVirtual ? view.total : pageSize\"\n                [take]=\"pageSize\"\n                [skip]=\"skip\"\n                [columns]=\"columnsContainer\"\n                [selectable]=\"selectable\"\n                [detailTemplate]=\"detailTemplate\"\n                (containerScroll)=\"containerScroll($event)\"\n                (pageChange)=\"notifyPageChange('list', $event)\">\n            </kendo-grid-list>\n            <div\n                *ngIf=\"showFooter\"\n                class=\"k-grid-footer\"\n                [style.paddingRight.px]=\"scrollbarWidth\">\n                <div\n                    *ngIf=\"lockedColumns.length\"\n                    class=\"k-grid-footer-locked\"\n                    [style.width.px]=\"lockedWidth\">\n                    <table>\n                        <colgroup kendoGridColGroup\n                            [columns]=\"lockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <tfoot kendoGridFooter\n                            [scrollable]=\"true\"\n                            [columns]=\"lockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </tfoot>\n                    </table>\n                </div><div #footer\n                    class=\"k-grid-footer-wrap\"\n                    [kendoGridResizableContainer]=\"lockedColumns.length\"\n                    [lockedWidth]=\"lockedWidth + scrollbarWidth + 3\">\n                    <table>\n                        <colgroup kendoGridColGroup\n                            [columns]=\"nonLockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </colgroup>\n                        <tfoot kendoGridFooter\n                            [scrollable]=\"true\"\n                            [columns]=\"nonLockedColumns\"\n                            [detailTemplate]=\"detailTemplate\">\n                        </tfoot>\n                    </table>\n                </div>\n            </div>\n        </template>\n        <template [ngIf]=\"!isScrollable\">\n            <table>\n                <colgroup kendoGridColGroup\n                    [columns]=\"columns\"\n                    [detailTemplate]=\"detailTemplate\">\n                </colgroup>\n                <thead kendoGridHeader\n                    [scrollable]=\"false\"\n                    [columns]=\"columns\"\n                    [sort]=\"sort\"\n                    [sortable]=\"sortable\"\n                    (sortChange)=\"sortChange.emit($event)\"\n                    [detailTemplate]=\"detailTemplate\">\n                </thead>\n                <tbody kendoGridTableBody\n                    [data]=\"view\"\n                    [skip]=\"skip\"\n                    [columns]=\"columns\"\n                    [selectable]=\"selectable\"\n                    [detailTemplate]=\"detailTemplate\">\n                </tbody>\n                <tfoot kendoGridFooter\n                    *ngIf=\"showFooter\"\n                    [scrollable]=\"false\"\n                    [columns]=\"columns\"\n                    [detailTemplate]=\"detailTemplate\">\n                </tfoot>\n            </table>\n        </template>\n        <kendo-pager\n            *ngIf=\"showPager\"\n            [pageSize]=\"pageSize\"\n            [total]=\"view.total\"\n            [skip]=\"skip\"\n            [options]=\"pageable\"\n            (pageChange)=\"notifyPageChange('pager', $event)\">\n        </kendo-pager>\n    "
                },] },
    ];
    /** @nocollapse */
    GridComponent.ctorParameters = [
        { type: BrowserSupportService, },
        { type: SelectionService, },
        { type: ElementRef, },
    ];
    GridComponent.propDecorators = {
        'data': [{ type: Input },],
        'pageSize': [{ type: Input },],
        'height': [{ type: Input },],
        'rowHeight': [{ type: Input },],
        'detailRowHeight': [{ type: Input },],
        'skip': [{ type: Input },],
        'scrollable': [{ type: Input },],
        'selectable': [{ type: Input },],
        'sort': [{ type: Input },],
        'sortable': [{ type: Input },],
        'pageable': [{ type: Input },],
        'pageChange': [{ type: Output },],
        'sortChange': [{ type: Output },],
        'selectionChange': [{ type: Output },],
        'dataStateChange': [{ type: Output },],
        'columns': [{ type: ContentChildren, args: [ColumnComponent,] },],
        'className': [{ type: HostBinding, args: ['class',] },],
        'detailTemplate': [{ type: ContentChild, args: [DetailTemplateDirective,] },],
        'header': [{ type: ViewChild, args: ["header",] },],
        'footer': [{ type: ViewChild, args: ["footer",] },],
    };
    return GridComponent;
}());
