(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(7);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(8);
	var align_service_1 = __webpack_require__(9);
	var dom_service_1 = __webpack_require__(10);
	var position_service_1 = __webpack_require__(11);
	var resize_service_1 = __webpack_require__(12);
	var scrollable_service_1 = __webpack_require__(13);
	var util_1 = __webpack_require__(14);
	__webpack_require__(15);
	var DEFAULT_OFFSET = { left: 0, top: 0 };
	/**
	 *  Represents the Kendo UI Popup component for Angular.
	 */
	var PopupComponent = (function () {
	    function PopupComponent(_alignService, container, _cdr, _positionService, _resizeService, _scrollableService, _renderer) {
	        this._alignService = _alignService;
	        this.container = container;
	        this._cdr = _cdr;
	        this._positionService = _positionService;
	        this._resizeService = _resizeService;
	        this._scrollableService = _scrollableService;
	        this._renderer = _renderer;
	        /**
	         * Controls the Popup animation. By default, the open and close animation are enabled.
	         */
	        this.animate = true;
	        /**
	         * Specifies the anchor pivot point.
	         *
	         * **anchorAlign.horizontal** - String(default: "left")
	         *
	         * Specifies the horizontal alignment point of the anchor.
	         *
	         * The available options are:
	         *
	         * - `left` — Use the leftmost point of the anchor element.
	         * - `center` — Use the center point of the anchor element.
	         * - `right` — Use the rightmost point of the anchor element.
	         *
	         * **anchorAlign.vertival** - String(default: "bottom")
	         *
	         * Specifies the vertical alignment point of the anchor.
	         *
	         * The available options are:
	         *
	         * - `top` — Uses the top point of the anchor element.
	         * - `center` — Uses the center point of the anchor element.
	         * - `bottom` — Uses the bottom point of the anchor element.
	         */
	        this.anchorAlign = { horizontal: 'left', vertical: 'bottom' };
	        /**
	         * Configures the collision behavior of the Popup.
	         *
	         * **collision.horizontal** - String(default: "fit")
	         *
	         * Defines the horizontal position of the Popup when it is not fully visible.
	         *
	         * The available options are:
	         *
	         * - `fit` — Moves the Popup horizontally until it is fully displayed in the view port.
	         * - `flip` — Flips the Popup position based on the origin and position properties.
	         *
	         * **collision.vertical** - String(default: "flip")
	         *
	         * Defines the vertical position of the Popup when it is not fully visible.
	         *
	         * The available options are:
	         *
	         * - `fit` — Moves the Popup vertically until it is fully displayed in the view port.
	         * - `flip` — Flips the Popup position based on the origin and position properties.
	         */
	        this.collision = { horizontal: 'fit', vertical: 'flip' };
	        /**
	         * Specifies the popup pivot point.
	         *
	         * **popupAlign.horizontal** - String(default: "left")
	         *
	         * Specifies the horizontal alignment point of the Popup.
	         *
	         * The available options are:
	         *
	         * - `left` — Uses the leftmost point of the Popup element.
	         * - `center` — Uses the center point of the Popup element.
	         * - `right` — Uses the rightmost point of the Popup element.
	         *
	         * **popupAlign.vertival** - String(default: "top")
	         *
	         * Specifies the vertical alignment point of the Popup.
	         *
	         * The available options are:
	         *
	         * - `top` — Uses the top point of the Popup element.
	         * - `center` — Uses the center point of the Popup element.
	         * - `bottom` — Uses the bottom point of the Popup element.
	         */
	        this.popupAlign = { horizontal: 'left', vertical: 'top' };
	        /**
	         * Specifies the element absolute position. The Popup will open next to that point.
	         *
	         * The Popup pivot point is defined by the `popupAlign` configuration option.
	         * The boundary detection is applied by using the Window view port.
	         *
	         * The `Offset` type includes:
	         *
	         * - `offset.left` - Defines the left position of the Popup.
	         * - `offset.top` - Defines the top position of the Popup.
	         */
	        this.offset = DEFAULT_OFFSET;
	        /**
	         * This event is triggered when the anchor is scrolled outside of the screen bounds.
	         *
	         * For more details, refer to the section on the
	         * [`On Anchor Outside Of Viewport`]({% slug overview_popup_kendouiforangular %}#on-anchor-outside-of-viewport)
	         * event.
	         */
	        this.anchorViewportLeave = new core_1.EventEmitter();
	        /**
	         * @hidden
	         */
	        this.direction = 'down';
	        this.currentOffset = DEFAULT_OFFSET;
	        this.resolvedPromised = Promise.resolve(null);
	        _renderer.setElementClass(container.nativeElement, 'k-animation-container', true);
	        _renderer.setElementClass(container.nativeElement, 'k-animation-container-fixed', true);
	    }
	    Object.defineProperty(PopupComponent.prototype, "offsetLeft", {
	        /**
	         * @hidden
	         */
	        get: function () {
	            return this.currentOffset.left;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PopupComponent.prototype, "offsetTop", {
	        /**
	         * @hidden
	         */
	        get: function () {
	            return this.currentOffset.top;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PopupComponent.prototype.ngOnInit = function () {
	        var repositionCallback = this.reposition.bind(this);
	        this._resizeService.subscribe(repositionCallback);
	        this._scrollableService.forElement(this.anchor || this.container).subscribe(this.onScroll.bind(this));
	    };
	    PopupComponent.prototype.ngAfterViewChecked = function () {
	        var _this = this;
	        var _a = this.position(), flipped = _a.flipped, offset = _a.offset;
	        var newDirection = this.getDirection(flipped);
	        if (this.direction === newDirection && !util_1.isDifferentOffset(this.currentOffset, offset)) {
	            return;
	        }
	        this.resolvedPromised.then(function () {
	            _this.currentOffset = offset;
	            _this.direction = newDirection;
	            _this._cdr.markForCheck();
	        });
	    };
	    PopupComponent.prototype.ngOnDestroy = function () {
	        this._resizeService.unsubscribe();
	        this._scrollableService.unsubscribe();
	    };
	    PopupComponent.prototype.reposition = function () {
	        if (!util_1.isDocumentAvailable()) {
	            return;
	        }
	        var _a = this.position(), flipped = _a.flipped, offset = _a.offset;
	        this.direction = this.getDirection(flipped);
	        this.currentOffset = offset;
	    };
	    PopupComponent.prototype.position = function () {
	        var alignedOffset = this._alignService.alignElement({
	            anchor: this.anchor,
	            anchorAlign: this.anchorAlign,
	            element: this.container,
	            elementAlign: this.popupAlign,
	            offset: this.offset
	        });
	        return this._positionService.positionElement({
	            anchor: this.anchor,
	            anchorAlign: this.anchorAlign,
	            collisions: this.collision,
	            currentLocation: alignedOffset,
	            element: this.container,
	            elementAlign: this.popupAlign
	        });
	    };
	    PopupComponent.prototype.getDirection = function (flipped) {
	        return this.animate ? (flipped ? 'up' : 'down') : 'none';
	    };
	    PopupComponent.prototype.onScroll = function (isInViewPort) {
	        if (isInViewPort) {
	            this.reposition();
	        }
	        else {
	            this.anchorViewportLeave.emit();
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], PopupComponent.prototype, "animate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.ElementRef)
	    ], PopupComponent.prototype, "anchor", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], PopupComponent.prototype, "anchorAlign", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], PopupComponent.prototype, "collision", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], PopupComponent.prototype, "popupAlign", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], PopupComponent.prototype, "popupClass", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], PopupComponent.prototype, "offset", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', core_1.EventEmitter)
	    ], PopupComponent.prototype, "anchorViewportLeave", void 0);
	    __decorate([
	        core_1.HostBinding('style.left.px'), 
	        __metadata('design:type', Number)
	    ], PopupComponent.prototype, "offsetLeft", null);
	    __decorate([
	        core_1.HostBinding('style.top.px'), 
	        __metadata('design:type', Number)
	    ], PopupComponent.prototype, "offsetTop", null);
	    PopupComponent = __decorate([
	        core_1.Component({
	            animations: [
	                core_1.trigger('toggle', [
	                    core_1.transition('void => down, up => down', [
	                        core_1.style({ transform: 'translateY(-100%)' }),
	                        core_1.animate('0.2s ease-in', core_1.style({ transform: 'translateY(0)' }))
	                    ]),
	                    core_1.transition('down => void', [
	                        core_1.style({ transform: 'translateY(0)' }),
	                        core_1.animate('0.2s ease-in', core_1.style({ transform: 'translateY(-100%)' }))
	                    ]),
	                    core_1.transition('void => up, down => up', [
	                        core_1.style({ transform: 'translateY(100%)' }),
	                        core_1.animate('0.2s ease-in', core_1.style({ transform: 'translateY(0)' }))
	                    ]),
	                    core_1.transition('up => void', [
	                        core_1.style({ transform: 'translateY(0)' }),
	                        core_1.animate('0.2s ease-in', core_1.style({ transform: 'translateY(100%)' }))
	                    ])
	                ])
	            ],
	            exportAs: 'kendo-popup',
	            providers: [align_service_1.AlignService, dom_service_1.DOMService, position_service_1.PositionService, resize_service_1.ResizeService, scrollable_service_1.ScrollableService],
	            selector: 'kendo-popup',
	            template: "\n        <div class=\"k-popup\" [ngClass]=\"popupClass\" [@toggle]=\"direction\">\n            <ng-content></ng-content>\n        </div>\n     "
	        }), 
	        __metadata('design:paramtypes', [align_service_1.AlignService, core_1.ElementRef, core_1.ChangeDetectorRef, position_service_1.PositionService, resize_service_1.ResizeService, scrollable_service_1.ScrollableService, core_1.Renderer])
	    ], PopupComponent);
	    return PopupComponent;
	}());
	exports.PopupComponent = PopupComponent;


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("@angular/core");

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("./services/align.service");

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = require("./services/dom.service");

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = require("./services/position.service");

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("./services/resize.service");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("./services/scrollable.service");

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = require("./util");

/***/ },
/* 15 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }
/******/ ])));
//# sourceMappingURL=popup.component.js.map